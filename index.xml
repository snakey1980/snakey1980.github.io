<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>snakey1980&#39;s GitHub Pages</title>
    <link>http://snakey1980.github.io/</link>
    <description>Recent content on snakey1980&#39;s GitHub Pages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Dec 2018 12:00:54 -0500</lastBuildDate>
    
	<atom:link href="http://snakey1980.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ghost</title>
      <link>http://snakey1980.github.io/posts/ghost/</link>
      <pubDate>Wed, 05 Dec 2018 12:00:54 -0500</pubDate>
      
      <guid>http://snakey1980.github.io/posts/ghost/</guid>
      <description>Here&amp;rsquo;s a program that helps (you cheat) at Ghost. I must look into Lexicant some time too.
UPDATE: this may not be ideal. I just had it play itself with some strange results. I will look into it and may revise it.
fun main(args: Array&amp;lt;String&amp;gt;) { repl() } val words = File(&amp;quot;/path/to/your/wordlist.txt&amp;quot;).readLines().toSet() fun kills(given: String, word: String, players: Int): Boolean { val remaining = word.removePrefix(given).length return word.length &amp;gt; 2 &amp;amp;&amp;amp; (remaining % players == 1) } fun possibleWords(given: String): Set&amp;lt;String&amp;gt; { return words.</description>
    </item>
    
    <item>
      <title>Hangman</title>
      <link>http://snakey1980.github.io/posts/hangman/</link>
      <pubDate>Sun, 25 Nov 2018 10:57:28 -0500</pubDate>
      
      <guid>http://snakey1980.github.io/posts/hangman/</guid>
      <description>A fairly effective way to play Hangman offense:
 Consider all words that match the pattern and don&amp;rsquo;t contain guesses that have been denied Guess the letter not guessed already that appears in most of these words  Here&amp;rsquo;s some code that plays like that:
class Player(pattern: List&amp;lt;Char&amp;gt;) { private val pattern = pattern.toMutableList() private val possibleWords = wordsOfLengthCachy(pattern.size).toMutableSet() fun guess(): Char { return (&#39;A&#39;..&#39;Z&#39;) .filter { it !in pattern } .</description>
    </item>
    
    <item>
      <title>Spot It aka Dobble</title>
      <link>http://snakey1980.github.io/posts/dobble-spot-it/</link>
      <pubDate>Wed, 02 May 2018 17:00:26 -0400</pubDate>
      
      <guid>http://snakey1980.github.io/posts/dobble-spot-it/</guid>
      <description>Spot It, also sold as Dobble is a fun card game with a deck of around 50 cards printed with 8 symbols each, with one key rule: every possible pair of cards has exactly one symbol in common.
This leads to questions like
 What&amp;rsquo;s the maximum number of cards there could be in the deck? With the number of cards maxed, how many symbols are there in total? How can you construct a deck which conforms to the rule?</description>
    </item>
    
    <item>
      <title>Pirates</title>
      <link>http://snakey1980.github.io/posts/pirates/</link>
      <pubDate>Fri, 22 Dec 2017 16:45:09 -0500</pubDate>
      
      <guid>http://snakey1980.github.io/posts/pirates/</guid>
      <description>Like Cheryl&amp;rsquo;s Birthday this Pirates Problem is more fun to program than to work out by hand.
A pirate&amp;rsquo;s favorite things The problem goes like this:
 It happens that pirates often acquire coins and need to share them out amongst themselves. The way they do this is that the captain &amp;ndash; there is always strict seniority within any group of pirates &amp;ndash; proposes a distribution and the pirates vote on it, the captain having a casting vote.</description>
    </item>
    
    <item>
      <title>Cheryl&#39;s Birthday</title>
      <link>http://snakey1980.github.io/posts/cheryl/</link>
      <pubDate>Tue, 19 Dec 2017 12:57:55 -0500</pubDate>
      
      <guid>http://snakey1980.github.io/posts/cheryl/</guid>
      <description>Cheryl&amp;rsquo;s Birthday was fun a few years ago. Even more fun is Peter Norvig&amp;rsquo;s treatment of it with Python. What follows here is the same idea reimplemented in Kotlin.
Date extenstions for Strings:
fun String.month() = this.split(&amp;quot; &amp;quot;)[0] fun String.day() = this.split(&amp;quot; &amp;quot;)[1]  Our Agent class. An agent is someone trying to solve the puzzle, whether Albert, Bernard or ourselves.
class Agent { val possibilities = mutableSetOf( &amp;quot;May 15&amp;quot;, &amp;quot;May 16&amp;quot;, &amp;quot;May 19&amp;quot;, &amp;quot;June 17&amp;quot;, &amp;quot;June 18&amp;quot;, &amp;quot;July 14&amp;quot;, &amp;quot;July 16&amp;quot;, &amp;quot;August 14&amp;quot;, &amp;quot;August 15&amp;quot;, &amp;quot;August 17&amp;quot;) fun tellMonth(date: String) = this.</description>
    </item>
    
    <item>
      <title>Secret Santa</title>
      <link>http://snakey1980.github.io/posts/secret-santa/</link>
      <pubDate>Mon, 13 Nov 2017 19:49:44 -0500</pubDate>
      
      <guid>http://snakey1980.github.io/posts/secret-santa/</guid>
      <description>Things I never knew I never knew about Secret Santa&amp;hellip;
Names in a hat The first time I played Secret Santa we assigned givers and receivers like so:
 Put the names of all the players in a hat Take turns to shake the hat and pick a name out at random. If you pick your own name, put it back and pick again.  So when I decided to program it this is how I tried to do it.</description>
    </item>
    
  </channel>
</rss>